{"version":3,"sources":["swatch-finder.svg","upload.svg","App.js","helpers.js","Color.js","Header.js","serviceWorker.js","index.js"],"names":["module","exports","imgSrc","colorDelta","hex1","hex2","r1","parseInt","substring","g1","b1","r2","g2","b2","r","Math","abs","g","b","rgbToHex","rgb","toString","padStart","changeBackground","str","document","body","style","backgroundColor","Color","hex","weight","React","useState","content","setContent","isMobile","window","innerWidth","size","min","emphasis","colorStyle","height","width","onMouseOver","className","onClick","el","createElement","value","appendChild","select","execCommand","removeChild","copyToClipboard","setTimeout","Header","props","src","logo","alt","target","rel","href","onChange","changeSize","type","id","name","max","state","htmlFor","downloadImage","App","fileName","setFileName","colors","setColors","image","setImage","setSize","photoContainer","createRef","canvasRef","inputRef","processImg","useCallback","file","URL","createObjectURL","canvas","current","ctx","getContext","img","Image","onload","heightOrWidth","h","round","w","drawImage","imageSmoothingEnabled","colorArr","i","j","c","getImageData","data","color","push","length","color2","splice","weighColors","sort","x","y","slice","map","key","pixelate","useEffect","imageEl","upload","e","a","toDataURL","download","click","ref","onDragOver","preventDefault","onDragLeave","onDrop","dataTransfer","files","accept","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","getElementById","process","origin","addEventListener","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.c802814d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/swatch-finder.0856352c.svg\";","module.exports = __webpack_public_path__ + \"static/media/upload.f4ef2c0a.svg\";","import React, { useEffect, useCallback, useState, createRef } from \"react\";\nimport Color from \"./Color\";\nimport Header from \"./Header\";\n\nimport \"./App.css\";\nimport upload from \"./upload.svg\";\n\nimport { toHex, weighColors, changeBackground } from \"./helpers\";\nlet imgSrc;\n\nconst App = () => {\n  const isMobile = !!(window.innerWidth <= 800);\n  const handleFormClick = () => inputRef.current.click();\n  const [fileName, setFileName] = useState(\"\");\n  const [colors, setColors] = useState([]);\n  const [image, setImage] = useState(\"\");\n  const [size, setSize] = useState(5);\n  const photoContainer = createRef();\n  const canvasRef = createRef();\n  const inputRef = createRef();\n\n  const processImg = useCallback(\n    (file) => {\n      if (!file && !imgSrc) return;\n\n      if (file) {\n        imgSrc = URL.createObjectURL(file);\n      }\n\n      const canvas = canvasRef.current;\n      const ctx = canvas.getContext(\"2d\");\n      const img = new Image();\n      setFileName(file?.name ?? fileName);\n      setImage(imgSrc);\n\n      function draw() {\n        img.onload = () => pixelate();\n        img.src = imgSrc;\n      }\n\n      function pixelate() {\n        const height = (canvas.height = img.height);\n        const width = (canvas.width = img.width);\n        const heightOrWidth = height > width ? height : width;\n        const h = Math.round((height * size) / heightOrWidth);\n        const w = Math.round((width * size) / heightOrWidth);\n\n        ctx.drawImage(img, 0, 0, w, h);\n        ctx.imageSmoothingEnabled = false;\n        ctx.drawImage(canvas, 0, 0, w, h, 0, 0, width, height);\n\n        let colorArr = [];\n        for (let i = 0; i < w; i++) {\n          for (let j = 0; j < h; j++) {\n            let c = ctx.getImageData(\n              (width / w) * i,\n              (height / h) * j,\n              1,\n              1\n            ).data;\n\n            let color = {\n              weight: 1,\n              hex: toHex(c[0], c[1], c[2]),\n            };\n            colorArr.push(color);\n          }\n        }\n\n        weighColors(colorArr);\n        colorArr = colorArr.sort((x, y) => x.weight - y.weight);\n        changeBackground(colorArr[colorArr.length - 1].hex);\n        setColors(\n          colorArr.slice(0, 15).map((x) => <Color {...x} key={x.hex} />)\n        );\n      }\n      draw();\n    },\n    [canvasRef, fileName, size]\n  );\n\n  const onChange = (e) => {\n    if (!e.target.files.length) return;\n    processImg(e.target.files[0]);\n  };\n\n  const onDrop = (e) => {\n    e.preventDefault();\n    if (!e.dataTransfer) return;\n    processImg(e.dataTransfer.files[0]);\n    photoContainer.current.style.backgroundColor = \"rgba(51,51,51,1)\";\n  };\n\n  const highlight = (e) => {\n    e.preventDefault();\n    photoContainer.current.style.backgroundColor = \"rgba(255,255,255,.3)\";\n  };\n\n  const onDragLeave = (e) => {\n    e.preventDefault();\n    photoContainer.current.style.backgroundColor = \"rgba(51,51,51,1)\";\n  };\n\n  const changeSize = (e) => {\n    setSize(e.target.value);\n  };\n\n  useEffect(() => {\n    processImg();\n  }, [processImg, size]);\n\n  function downloadImage() {\n    var a = document.createElement(\"a\");\n    a.href = canvasRef.current.toDataURL(\"image/png\");\n    a.download = fileName;\n    document.body.appendChild(a);\n    a.click();\n  }\n\n  const imageEl =\n    image === \"\" ? (\n      <div>\n        <img src={upload} alt={fileName} />\n        <div className=\"image-text\">\n          <span className=\"bold\">Choose a file</span> &nbsp;\n          {!isMobile && \"or drag it here\"}\n        </div>\n      </div>\n    ) : (\n      <img className=\"image-file\" src={image} alt=\"select file\" />\n    );\n\n  return (\n    <div>\n      <Header\n        size={size}\n        changeSize={changeSize}\n        downloadImage={downloadImage}\n      />\n      <div className=\"container\">\n        <div\n          ref={photoContainer}\n          className=\"photo-container\"\n          onDragOver={highlight}\n          onDragLeave={onDragLeave}\n          onDrop={onDrop}\n        >\n          <div\n            className={`photo${image === \"\" ? \" border\" : \"\"}`}\n            onClick={handleFormClick}\n          >\n            {imageEl}\n            <canvas ref={canvasRef}></canvas>\n          </div>\n        </div>\n        <div className=\"results\">\n          <div className=\"color-swatch\">{colors}</div>\n        </div>\n        <input\n          ref={inputRef}\n          accept=\"image/*\"\n          type=\"file\"\n          onChange={onChange}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","export const weighColors = (colorArr) => {\n  for (let i = 0; i < colorArr.length; i++) {\n    let color = colorArr[i];\n    for (let j = i + 1; j < colorArr.length; j++) {\n      let color2 = colorArr[j];\n      if (colorDelta(color.hex, color2.hex) > 0.91) {\n        color.weight += color2.weight;\n        colorArr.splice(j--, 1);\n      }\n    }\n  }\n};\n\nexport const colorDelta = (hex1, hex2) => {\n  // get red/green/blue int values of hex1\n  var r1 = parseInt(hex1.substring(0, 2), 16);\n  var g1 = parseInt(hex1.substring(2, 4), 16);\n  var b1 = parseInt(hex1.substring(4, 6), 16);\n  // get red/green/blue int values of hex2\n  var r2 = parseInt(hex2.substring(0, 2), 16);\n  var g2 = parseInt(hex2.substring(2, 4), 16);\n  var b2 = parseInt(hex2.substring(4, 6), 16);\n  // calculate differences between reds, greens and blues\n  var r = 255 - Math.abs(r1 - r2);\n  var g = 255 - Math.abs(g1 - g2);\n  var b = 255 - Math.abs(b1 - b2);\n  // limit differences between 0 and 1\n  r /= 255;\n  g /= 255;\n  b /= 255;\n  // 0 means opposit colors, 1 means same colors\n  return (r + g + b) / 3;\n};\n\nconst rgbToHex = (rgb) => rgb.toString(16).padStart(2, \"0\");\n\nexport const toHex = (r, g, b) => rgbToHex(r) + rgbToHex(g) + rgbToHex(b);\n\nexport const copyToClipboard = (str) => {\n  const el = document.createElement(\"textarea\");\n  el.value = `#${str}`;\n  document.body.appendChild(el);\n  el.select();\n  document.execCommand(\"copy\");\n  document.body.removeChild(el);\n};\n\nexport const changeBackground = (str) => {\n  document.body.style.backgroundColor = `#${str}`;\n};\n","import React from \"react\";\n\nimport { copyToClipboard, changeBackground } from \"./helpers\";\n\nconst Color = ({ hex, weight }) => {\n  const [content, setContent] = React.useState(hex);\n  const isMobile = !!(window.innerWidth < 800);\n  const size = Math.min(2.5, 1 + weight / 15);\n  const emphasis = isMobile ? `${50 * `${size}`}px` : `${80 * `${size}`}px`;\n\n  const colorStyle = {\n    backgroundColor: `#${hex}`,\n    height: emphasis,\n    width: emphasis,\n  };\n\n  const clickColor = () => {\n    copyToClipboard(hex);\n    setContent(\"copied\");\n    setTimeout(() => setContent(hex), 400);\n  };\n\n  return (\n    <div\n      onMouseOver={() => changeBackground(hex)}\n      className=\"color-block\"\n      onClick={clickColor}\n      style={colorStyle}\n    >\n      {content}\n    </div>\n  );\n};\n\nexport default Color;\n","import React from \"react\";\n\nimport logo from \"./swatch-finder.svg\";\n\nconst Header = (props) => {\n  return (\n    <header>\n      <img className=\"logo\" src={logo} alt=\"swatch finder logo\"></img>\n      <div className=\"header-text\">\n        <p className=\"title\">Swatch Finder</p>\n        <a\n          target=\"_blank\"\n          className=\"credit\"\n          rel=\"noopener noreferrer\"\n          href=\"https://github.com/victoriousj\"\n        >\n          <p>by victor d. johnson</p>\n        </a>\n      </div>\n      <div>\n        <input\n          onChange={props.changeSize}\n          type=\"range\"\n          id=\"size\"\n          name=\"size\"\n          min=\"1\"\n          max=\"100\"\n          value={props.state}\n        />\n        <label htmlFor=\"volume\">Pixel Size </label>\n        <span>{props.size}</span>\n      </div>\n      <div><button onClick={props.downloadImage}>download</button></div>\n    </header>\n  );\n};\n\nexport default Header;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\nserviceWorker.register();\n"],"sourceRoot":""}