{"version":3,"sources":["swatch-finder.svg","helpers.js","Color.js","Header.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","weighColors","colorArr","i","length","color","j","color2","colorDelta","hex","weight","splice","hex1","hex2","r1","parseInt","substring","g1","b1","r2","g2","b2","r","Math","abs","g","b","rgbToHex","rgb","Number","toString","fullColorHex","Color","isMobile","window","innerWidth","emphasis","React","useState","content","setContent","colorStyle","backgroundColor","height","width","onMouseOver","str","document","body","style","className","onClick","el","createElement","value","appendChild","select","execCommand","removeChild","copyToClipboard","setTimeout","Header","src","logo","alt","target","rel","href","App","colors","setColors","image","setImage","canvasRef","createRef","inputRef","imageEl","current","click","ref","type","onChange","e","files","imgSrc","URL","createObjectURL","canvas","ctx","getContext","img","Image","onload","heightOrWidth","h","w","drawImage","imageSmoothingEnabled","mozImageSmoothingEnabled","c","getImageData","data","push","slice","map","x","key","pixelate","crossOrigin","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+HAAAA,EAAOC,QAAU,IAA0B,2C,sICA9BC,EAAc,SAAAC,GACzB,IAAK,IAAIC,EAAI,EAAGA,EAAID,EAASE,OAAQD,IAEnC,IADA,IAAIE,EAAQH,EAASC,GACZG,EAAIH,EAAI,EAAGG,EAAIJ,EAASE,OAAQE,IAAK,CAC5C,IAAIC,EAASL,EAASI,GAClBE,EAAWH,EAAMI,IAAKF,EAAOE,KAAO,MACtCJ,EAAMK,QAAUH,EAAOG,OACvBR,EAASS,OAAOL,IAAK,MAMhBE,EAAa,SAACI,EAAMC,GAE/B,IAAIC,EAAKC,SAASH,EAAKI,UAAU,EAAG,GAAI,IACpCC,EAAKF,SAASH,EAAKI,UAAU,EAAG,GAAI,IACpCE,EAAKH,SAASH,EAAKI,UAAU,EAAG,GAAI,IAEpCG,EAAKJ,SAASF,EAAKG,UAAU,EAAG,GAAI,IACpCI,EAAKL,SAASF,EAAKG,UAAU,EAAG,GAAI,IACpCK,EAAKN,SAASF,EAAKG,UAAU,EAAG,GAAI,IAEpCM,EAAI,IAAMC,KAAKC,IAAIV,EAAKK,GACxBM,EAAI,IAAMF,KAAKC,IAAIP,EAAKG,GACxBM,EAAI,IAAMH,KAAKC,IAAIN,EAAKG,GAM5B,QAJAC,GAAK,MACLG,GAAK,MACLC,GAAK,MAEgB,GAGjBC,EAAW,SAASC,GACxB,IAAInB,EAAMoB,OAAOD,GAAKE,SAAS,IAI/B,OAHIrB,EAAIL,OAAS,IACfK,EAAM,IAAMA,GAEPA,GAGIsB,EAAe,SAAST,EAAGG,EAAGC,GAIzC,OAHUC,EAASL,GACPK,EAASF,GACVE,EAASD,ICVPM,EA/BD,SAAC,GAAqB,IAAnBvB,EAAkB,EAAlBA,IAAKC,EAAa,EAAbA,OACduB,EAAWC,OAAOC,WAAa,IAC/BC,EAAmB,UAARH,EACV,eAAUvB,GACV,eAAUA,GAFQ,MAFQ,EAKH2B,IAAMC,SAAS7B,GALZ,mBAK1B8B,EAL0B,KAKjBC,EALiB,KAO3BC,EAAa,CACjBC,gBAAgB,IAAD,OAAMjC,GACrBkC,OAAQP,EACRQ,MAAOR,GAST,OACE,yBACES,YAAa,kBDiCaC,ECjCUrC,ODkCxCsC,SAASC,KAAKC,MAAMP,gBAApB,WAA0CI,IADZ,IAAAA,GChC1BI,UAAU,cACVC,QAVe,YDgCU,SAAAL,GAC7B,IAAMM,EAAKL,SAASM,cAAc,YAClCD,EAAGE,MAAH,WAAeR,GACfC,SAASC,KAAKO,YAAYH,GAC1BA,EAAGI,SACHT,SAASU,YAAY,QACrBV,SAASC,KAAKU,YAAYN,GCrCxBO,CAAgBlD,GAChB+B,EAAW,UACXoB,YAAW,kBAAMpB,EAAW/B,KAAM,MAQhCwC,MAAOR,GAENF,I,gBCPQsB,EAnBA,WACb,OACE,gCACE,yBAAKX,UAAU,OAAOY,IAAKC,IAAMC,IAAI,uBACrC,yBAAKd,UAAU,eACb,uBAAGA,UAAU,SAAb,iBACA,uBACEe,OAAO,SACPf,UAAU,SACVgB,IAAI,sBACJC,KAAK,kCAEL,uDC0GKC,G,MAlHH,WACV,IADgB,EAEY/B,IAAMC,SAAS,IAF3B,mBAET+B,EAFS,KAEDC,EAFC,OAGUjC,IAAMC,SAAS,IAHzB,mBAGTiC,EAHS,KAGFC,EAHE,KAIVC,EAAYpC,IAAMqC,YAClBC,EAAWtC,IAAMqC,YA2EjBE,EACM,KAAVL,EACE,iDAEA,yBACErB,UAAU,aACVY,IAAKS,EACLP,IAAI,cACJb,QAbW,WACfqB,EAAS,IACTF,EAAU,OAeZ,OACE,6BACE,kBAAC,EAAD,MACA,yBAAKpB,UAAU,aACb,yBAAKA,UAAU,mBACb,yBACEA,UAAS,gBAAqB,KAAVqB,EAAe,SAAW,IAC9CpB,QAlGc,kBAAMwB,EAASE,QAAQC,UAoGpCF,EACD,4BAAQG,IAAKN,MAGjB,yBAAKvB,UAAU,WACb,yBAAKA,UAAU,gBAAgBmB,IAEjC,2BAAOU,IAAKJ,EAAUK,KAAK,OAAOC,SArGvB,SAAAC,GACf,GAAKA,EAAEjB,OAAOkB,MAAM/E,OAApB,CAEA,IAAMgF,EAASC,IAAIC,gBAAgBJ,EAAEjB,OAAOkB,MAAM,IAC5CI,EAASd,EAAUI,QACnBW,EAAMD,EAAOE,WAAW,MACxBC,EAAM,IAAIC,MAChBnB,EAASY,GAGPM,EAAIE,OAAS,kBAKf,WAIE,IACMjD,EAAU4C,EAAO5C,OAAS+C,EAAI/C,OAC9BC,EAAS2C,EAAO3C,MAAQ8C,EAAI9C,MAC5BiD,EAAgBlD,EAASC,EAAQD,EAASC,EAE1CkD,EALO,GAKFnD,GAAkBA,IAAWkD,EAAgBlD,EAASC,GAC3DmD,EANO,GAMFnD,GAAiBA,IAAUiD,EAAgBjD,EAAQD,GAExDzC,EAAW,GAIjBsF,EAAIQ,UAAUN,EAAK,EAAG,EAAGK,EAAGD,GAG5BN,EAAIS,uBAAwB,EAC5BT,EAAIU,0BAA2B,EAI/BV,EAAIQ,UAAUT,EAAQ,EAAG,EAAGQ,EAAGD,EAAG,EAAG,EAAGlD,EAAOD,GAG/C,IAAK,IAAIxC,EAAI,EAAGA,EAAI4F,EAAG5F,IACrB,IAAK,IAAIG,EAAI,EAAGA,EAAIwF,EAAGxF,IAAK,CAC1B,IAAI6F,EAAIX,EAAIY,aACTxD,EAAQmD,EAAK5F,EAAIyC,GAAa,EAAJmD,GAC1BpD,EAASmD,EAAKxF,EAAIqC,GAAc,EAAJmD,GAC7B,EACA,GACAO,KAEEhG,EAAQ,CACViB,EAAG6E,EAAE,GACL1E,EAAG0E,EAAE,GACLzE,EAAGyE,EAAE,GACLzF,OAAQ,EACRD,IAAKsB,EAAaoE,EAAE,GAAIA,EAAE,GAAIA,EAAE,KAGlCjG,EAASoG,KAAKjG,GAGlBJ,EAAYC,GACZoE,EAAUpE,EAASqG,MAAM,EAAG,IAAIC,KAAI,SAAAC,GAAC,OAAI,kBAAC,EAAD,iBAAWA,EAAX,CAAcC,IAAKD,EAAEhG,WArD3CkG,IACnBjB,EAAIkB,YAAc,YAClBlB,EAAI5B,IAAMsB,UCfIyB,QACW,cAA7B3E,OAAO4E,SAASC,UAEe,UAA7B7E,OAAO4E,SAASC,UAEhB7E,OAAO4E,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO,kBAAC,EAAD,MAASnE,SAASoE,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.6d38ce17.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/swatch-finder.3a683617.svg\";","export const weighColors = colorArr => {\r\n  for (let i = 0; i < colorArr.length; i++) {\r\n    let color = colorArr[i];\r\n    for (let j = i + 1; j < colorArr.length; j++) {\r\n      let color2 = colorArr[j];\r\n      if (colorDelta(color.hex, color2.hex) > 0.91) {\r\n        color.weight += color2.weight;\r\n        colorArr.splice(j--, 1);\r\n      }\r\n    }\r\n  }\r\n};\r\n\r\nexport const colorDelta = (hex1, hex2) => {\r\n  // get red/green/blue int values of hex1\r\n  var r1 = parseInt(hex1.substring(0, 2), 16);\r\n  var g1 = parseInt(hex1.substring(2, 4), 16);\r\n  var b1 = parseInt(hex1.substring(4, 6), 16);\r\n  // get red/green/blue int values of hex2\r\n  var r2 = parseInt(hex2.substring(0, 2), 16);\r\n  var g2 = parseInt(hex2.substring(2, 4), 16);\r\n  var b2 = parseInt(hex2.substring(4, 6), 16);\r\n  // calculate differences between reds, greens and blues\r\n  var r = 255 - Math.abs(r1 - r2);\r\n  var g = 255 - Math.abs(g1 - g2);\r\n  var b = 255 - Math.abs(b1 - b2);\r\n  // limit differences between 0 and 1\r\n  r /= 255;\r\n  g /= 255;\r\n  b /= 255;\r\n  // 0 means opposit colors, 1 means same colors\r\n  return (r + g + b) / 3;\r\n};\r\n\r\nconst rgbToHex = function(rgb) {\r\n  var hex = Number(rgb).toString(16);\r\n  if (hex.length < 2) {\r\n    hex = \"0\" + hex;\r\n  }\r\n  return hex;\r\n};\r\n\r\nexport const fullColorHex = function(r, g, b) {\r\n  var red = rgbToHex(r);\r\n  var green = rgbToHex(g);\r\n  var blue = rgbToHex(b);\r\n  return red + green + blue;\r\n};\r\n\r\nexport const copyToClipboard = str => {\r\n  const el = document.createElement(\"textarea\");\r\n  el.value = `#${str}`;\r\n  document.body.appendChild(el);\r\n  el.select();\r\n  document.execCommand(\"copy\");\r\n  document.body.removeChild(el);\r\n};\r\n\r\nexport const changeBackground = str => {\r\n  document.body.style.backgroundColor = `#${str}`;\r\n};\r\n","import React from \"react\";\r\n\r\nimport { copyToClipboard, changeBackground } from \"./helpers\";\r\n\r\nconst Color = ({ hex, weight }) => {\r\n  const isMobile = window.innerWidth < 800 ? true : false;\r\n  const emphasis = isMobile\r\n    ? `${50 * `1.${weight}`}px`\r\n    : `${80 * `1.${weight}`}px`;\r\n  const [content, setContent] = React.useState(hex);\r\n\r\n  const colorStyle = {\r\n    backgroundColor: `#${hex}`,\r\n    height: emphasis,\r\n    width: emphasis\r\n  };\r\n\r\n  const clickColor = () => {\r\n    copyToClipboard(hex);\r\n    setContent(\"copied\");\r\n    setTimeout(() => setContent(hex), 400);\r\n  };\r\n\r\n  return (\r\n    <div\r\n      onMouseOver={() => changeBackground(hex)}\r\n      className=\"color-block\"\r\n      onClick={clickColor}\r\n      style={colorStyle}\r\n    >\r\n      {content}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Color;\r\n","import React from \"react\";\r\n\r\nimport logo from \"./swatch-finder.svg\";\r\n\r\nconst Header = () => {\r\n  return (\r\n    <header>\r\n      <img className=\"logo\" src={logo} alt=\"swatch finder logo\"></img>\r\n      <div className=\"header-text\">\r\n        <p className=\"title\">Swatch Finder</p>\r\n        <a\r\n          target=\"_blank\"\r\n          className=\"credit\"\r\n          rel=\"noopener noreferrer\"\r\n          href=\"https://github.com/victoriousj\"\r\n        >\r\n          <p>by victor d. johnson</p>\r\n        </a>\r\n      </div>\r\n    </header>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import React from \"react\";\r\nimport Color from \"./Color\";\r\nimport Header from \"./Header\";\r\n\r\nimport \"./App.css\";\r\n\r\nimport { fullColorHex, weighColors } from \"./helpers\";\r\n\r\nconst App = () => {\r\n  const handleFormClick = () => inputRef.current.click();\r\n  const [colors, setColors] = React.useState([]);\r\n  const [image, setImage] = React.useState(\"\");\r\n  const canvasRef = React.createRef();\r\n  const inputRef = React.createRef();\r\n\r\n  const onChange = e => {\r\n    if (!e.target.files.length) return;\r\n\r\n    const imgSrc = URL.createObjectURL(e.target.files[0]);\r\n    const canvas = canvasRef.current;\r\n    const ctx = canvas.getContext(\"2d\");\r\n    const img = new Image();\r\n    setImage(imgSrc);\r\n\r\n    function draw() {\r\n      img.onload = () => pixelate();\r\n      img.crossOrigin = \"anonymous\";\r\n      img.src = imgSrc;\r\n    }\r\n\r\n    function pixelate() {\r\n      // The unit used to determine the dimensions\r\n      // of the pixel grid we will create.\r\n      // Higher value means more colors will be found.\r\n      const size = 10;\r\n      const height = (canvas.height = img.height);\r\n      const width = (canvas.width = img.width);\r\n      const heightOrWidth = height > width ? height : width;\r\n\r\n      const h = (height * size) / (height === heightOrWidth ? height : width);\r\n      const w = (width * size) / (width === heightOrWidth ? width : height);\r\n\r\n      const colorArr = [];\r\n\r\n      // Draw the image scaled down to a pixel grid the\r\n      // size of the 'size' variable (e.g., 8 x 8)\r\n      ctx.drawImage(img, 0, 0, w, h);\r\n      // Turn off smoothing so, when upscaled, the image\r\n      // will have hard edges\r\n      ctx.imageSmoothingEnabled = false;\r\n      ctx.mozImageSmoothingEnabled = false;\r\n      // Now scale up that small image and the details of\r\n      // most pixels will have been lost, leaving a grid\r\n      // of the most prominent colors in each section.\r\n      ctx.drawImage(canvas, 0, 0, w, h, 0, 0, width, height);\r\n\r\n      // Get the color of the center of each square in our grid.\r\n      for (let i = 0; i < w; i++) {\r\n        for (let j = 0; j < h; j++) {\r\n          var c = ctx.getImageData(\r\n            (width / w) * i + width / (w * 2),\r\n            (height / h) * j + height / (h * 2),\r\n            1,\r\n            1\r\n          ).data;\r\n\r\n          let color = {\r\n            r: c[0],\r\n            g: c[1],\r\n            b: c[2],\r\n            weight: 1,\r\n            hex: fullColorHex(c[0], c[1], c[2])\r\n          };\r\n\r\n          colorArr.push(color);\r\n        }\r\n      }\r\n      weighColors(colorArr);\r\n      setColors(colorArr.slice(0, 15).map(x => <Color {...x} key={x.hex} />));\r\n    }\r\n    draw();\r\n  };\r\n\r\n  const resetImg = () => {\r\n    setImage(\"\");\r\n    setColors([]);\r\n  };\r\n\r\n  const imageEl =\r\n    image === \"\" ? (\r\n      <span>select an image</span>\r\n    ) : (\r\n      <img\r\n        className=\"image-file\"\r\n        src={image}\r\n        alt=\"select file\"\r\n        onClick={resetImg}\r\n      />\r\n    );\r\n\r\n  return (\r\n    <div>\r\n      <Header />\r\n      <div className=\"container\">\r\n        <div className=\"photo-container\">\r\n          <div\r\n            className={`photo ${image === \"\" ? \"border\" : \"\"}`}\r\n            onClick={handleFormClick}\r\n          >\r\n            {imageEl}\r\n            <canvas ref={canvasRef}></canvas>\r\n          </div>\r\n        </div>\r\n        <div className=\"results\">\r\n          <div className=\"color-swatch\">{colors}</div>\r\n        </div>\r\n        <input ref={inputRef} type=\"file\" onChange={onChange} />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}